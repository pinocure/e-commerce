apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-config
  namespace: ecommerce-infra
data:
  ZOOKEEPER_CLIENT_PORT: "2181"
  ZOOKEEPER_TICK_TIME: "2000"

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: ecommerce-infra
  labels:
    app: zookeeper
    component: kafka-infrastructure
spec:
  ports:
    - port: 2181
      targetPort: 2181
      name: client
  selector:
    app: zookeeper
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: ecommerce-infra
  labels:
    app: zookeeper
    component: kafka-infrastructure
spec:
  serviceName: zookeeper
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
        component: kafka-infrastructure
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.4.0
          ports:
            - containerPort: 2181
          envFrom:
            - configMapRef:
                name: zookeeper-config
          volumeMounts:
            - name: zookeeper-data
              mountPath: /var/lib/zookeeper
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            tcpSocket:
              port: 2181
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 2181
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
  volumeClaimTemplates:
    - metadata:
        name: zookeeper-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
        storageClassName: standard

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: ecommerce-infra
data:
  KAFKA_BROKER_ID: "1"
  KAFKA_ZOOKEEPER_CONNECT: "zookeeper.ecommerce-infra.svc.cluster.local:2181"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
  KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka.ecommerce-infra.svc.cluster.local:9092"
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  KAFKA_NUM_PARTITIONS: "3"
  KAFKA_DEFAULT_REPLICATION_FACTOR: "1"
  KAFKA_LOG_RETENTION_HOURS: "168"
  KAFKA_LOG_SEGMENT_BYTES: "1073741824"
  KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: "300000"

---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: ecommerce-infra
  labels:
    app: kafka
    component: kafka-infrastructure
spec:
  ports:
    - port: 9092
      targetPort: 9092
      name: kafka
  selector:
    app: kafka
  type: ClusterIP

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: ecommerce-infra
  labels:
    app: kafka
    component: kafka-infrastructure
spec:
  serviceName: kafka
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
        component: kafka-infrastructure
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.4.0
          ports:
            - containerPort: 9092
          envFrom:
            - configMapRef:
                name: kafka-config
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
          livenessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: 9092
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
      initContainers:
        - name: wait-for-zookeeper
          image: busybox:1.35
          command:
            - 'sh'
            - '-c'
            - 'until nc -z zookeeper.ecommerce-infra.svc.cluster.local 2181; do echo "Waiting for Zookeeper..."; sleep 5; done; echo "Zookeeper is ready!"'
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
        storageClassName: standard

---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topics-setup
  namespace: ecommerce-infra
  labels:
    app: kafka-topics-setup
    component: kafka-infrastructure
spec:
  template:
    metadata:
      labels:
        app: kafka-topics-setup
    spec:
      restartPolicy: OnFailure
      initContainers:
        - name: wait-for-kafka
          image: busybox:1.35
          command:
            - 'sh'
            - '-c'
            - 'until nc -z kafka.ecommerce-infra.svc.cluster.local 9092; do echo "Waiting for Kafka..."; sleep 10; done; echo "Kafka is ready!"'
      containers:
        - name: kafka-topics
          image: confluentinc/cp-kafka:7.4.0
          command:
            - sh
            - -c
            - |
              kafka-topics --bootstrap-server kafka.ecommerce-infra.svc.cluster.local:9092 --create --topic order-events --partitions 3 --replication-factor 1 --if-not-exists
              kafka-topics --bootstrap-server kafka.ecommerce-infra.svc.cluster.local:9092 --create --topic user-events --partitions 3 --replication-factor 1 --if-not-exists
              kafka-topics --bootstrap-server kafka.ecommerce-infra.svc.cluster.local:9092 --create --topic product-events --partitions 3 --replication-factor 1 --if-not-exists
              kafka-topics --bootstrap-server kafka.ecommerce-infra.svc.cluster.local:9092 --create --topic coupon-events --partitions 3 --replication-factor 1 --if-not-exists
              kafka-topics --bootstrap-server kafka.ecommerce-infra.svc.cluster.local:9092 --create --topic balance-events --partitions 3 --replication-factor 1 --if-not-exists
              echo "Topics created successfully!"
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "200m"