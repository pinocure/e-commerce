apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
  namespace: {{ .Values.global.namespace }}
data:
  KAFKA_BROKER_ID: "1"
  KAFKA_ZOOKEEPER_CONNECT: "zookeeper.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.zookeeper.port }}"
  KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:{{ .Values.kafka.port }}"
  KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka.{{ .Values.global.namespace }}.svc.cluster.local:{{ .Values.kafka.port }}"
  KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT"
  KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
  KAFKA_PORT: ""
  KAFKA_HOST_NAME: ""
  KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
  KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
  KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
  KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  KAFKA_DELETE_TOPIC_ENABLE: "true"
  KAFKA_NUM_PARTITIONS: "3"
  KAFKA_DEFAULT_REPLICATION_FACTOR: "1"
  KAFKA_LOG_RETENTION_HOURS: "168"
  KAFKA_LOG_SEGMENT_BYTES: "1073741824"
  KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: "300000"
  KAFKA_HEAP_OPTS: "-Xmx768m -Xms512m"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: {{ .Values.global.namespace }}
spec:
  serviceName: kafka
  replicas: {{ .Values.kafka.replicas }}
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: {{ .Values.kafka.image }}
          ports:
            - containerPort: {{ .Values.kafka.port }}
          envFrom:
            - configMapRef:
                name: kafka-config
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
          livenessProbe:
            tcpSocket:
              port: {{ .Values.kafka.port }}
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: {{ .Values.kafka.port }}
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
      initContainers:
        - name: wait-for-zookeeper
          image: busybox:1.35
          command:
            - 'sh'
            - '-c'
            - 'until nc -z zookeeper.{{ .Values.global.namespace }}.svc.cluster.local {{ .Values.zookeeper.port }}; do echo "Waiting for Zookeeper..."; sleep 5; done; echo "Zookeeper is ready!"'
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: {{ .Values.global.namespace }}
spec:
  selector:
    app: kafka
  ports:
    - port: {{ .Values.kafka.port }}
      targetPort: {{ .Values.kafka.port }}
  type: ClusterIP